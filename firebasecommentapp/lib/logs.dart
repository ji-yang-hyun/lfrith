/*
결국 파일 옮겨서 다 다시 했는데 ㄹㅇ 3,4단계 건너뛰고 그냥 firecore깔고 ios min버전만 만지니까 됐음 ㅉ podfile알게된걸로 다행이라고 생각해야지
이제 로그인부터 하면 됨




로그인 하고 이것저것 그냥 다 됐는데
이거 cloudfirestore이 빌드가 너무 오래 걸렸음
그래서 
https://github.com/firebase/flutterfire/issues/2751
여기 보고 따라해서 시간을 줄였는데
그 과정에서 podfile.lock을 지우고 다시 했음
그래서 지우기 전 podfile.lock은 옵시디언에 백업해놓음


https://velog.io/@wjdguseya0880/Flutter-firebase%EC%97%B0%EB%8F%99%ED%95%98%EA%B8%B0

여기가 기본적으로 내가 따라가는 틀임
 */



/*
2025.03.18
오늘은 loginscreen ui작업했다
계속 기종별로 ui크기 고민했는데 애초에 flutter에서 기본으로 쓰는 크기 단위가
논리픽셀이라는 모든 기종에서 거의 동일한 크기를 유지하는 단위였기 때문에 딱히 고민할 필요 없이 만들고 마지막에 점검만 하면 될 듯 하다.

textfield의 border 색상때문에 애먹었지만 결국 방법을 찾았다!
이제 백엔드 구현하면 될듯 하다

*/


/*
회원가입 기능은 다 만들었다 이제 로그인 기능 만들어야됨.
그냥 하나하나 다 비교하는식으로 만들고 sharedfreference로 폰에 로그인 정보 저장하자 ㅇㅇ
*/

/*
회원가입스크린에서 중복확인(ID만 고유하면 됨) 만들었고
로그인스크린에서 회원가입 스크린 갈 수 있게 만들었고
로그인스크린에서 비번이나 아이디 틀린 거 표시!
로그인한 계정 번호를 글로벌 변수 userNumber로 저장함.(이거 말고는 저장 안 함)
따라서 로그인 스크린에서는 파이어베이스에서 읽을 수는 있지만 쓸 수는 없다
동시에 여러 명 로그인은 생각하지 않아봤는데 아마 문제 없을 듯 하다
회원가입 스크린에서 회원가입 완료하면 로그인 스크린으로 넘어간다
로그인 스크린 전 스크린을 이제 만들면 된다.
*/

/*
대댓글 기능 추가를 위해서 데이터베이스에 comment컬렉션 수정했음 데이터베이스 구조 적어놓은 문서도 수정함
*/

/*
일단은 현실과 타협하여 음악 재생기능은 없이 그냥 external webview로 유튜브 영상으로 이동시켜주는 것만 하자

사용할 external webview 라이브러리 https://blog.spiralmoon.dev/entry/Flutter-%ED%94%8C%EB%9F%AC%ED%84%B0%EC%97%90%EC%84%9C-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%A5%BC-%EB%8B%A4%EB%A3%A8%EB%8A%94-%EB%B0%A9%EB%B2%95
*/

/*

떄잉같은 채널에서 이상한 특수문자로 영어 쓰는데 그걸 검색하게 만들 수도 없고 유튜브도 그걸 검색하게 못 함.
그래서 그런 채널에서는 그런 검색용 키워드를 설명란에 쓰기 때문에 search_tag에 설명란 정보도 포함하게 했음
*/

/*
일단은 메타데이터를 가져오고 추가하는 것 까지 구현 했고
중복은 나중에 음악 페이지를 만든 후에 해야할 것 같아서 일단 내버려뒀음 코드 좀만 읽으면 거기가 어딘지 찾을 수 있을거임 그래도 그 떄 리턴해서 중복추가는 안 됨

메타데이터틑 가져오는것과 파이어베이스에 추가하는 것을 함수 두 개로 나눠서 이걸 이제 각각 써야함

지금은 유튜브 링크를 그냥 내가 지정해둔 링크를 사용해서 이제 클립보드에서 링크를 가져오는 기능도 만들고 그 다음에 가져온 메타데이터를 표시해준 후 확인버튼을 누르면 파이어베이스에 추가하는 기능까지 만들어야 함
*/

/*
시뮬레이터에서 인터넷을 쓸 수 있게 하기 위해서 개인정보 보호 브라우징 켰더니 된다 ㅇㅇ.
인터넷이 안되는건 아니고 시뮬레이터 특성상 인터넷 사요ㅛㅇ에 제한을 둔 것 같으니 그런 줄 알자 파이어베이스에는 문제 없을 듯 하다.

평점기능 추가하려고 song이랑 comment에 rating(number): 추가했음 number라서 그냥 소수점 쓸 수 있음.


지금 댓글이랑 대댓글 받아오고 표시하는 것 까지 다 했음 ㅇㅇ 근데 이게 속도가 진짜 너무 느릴 것 같기는 하네...
근데 이런 형식으로 저장하는 이상 어쩔 수 없으니까 그냥 여기서 최적화 하는걸로 하자.
await을 좀 빼고 비동기로 움직이게 하면 좀 낫지 않을까?
근데 column에서 처름 댓글을 호출할 때는 비동기니까 일단 여러 댓글을 추가해보고 어떤 양상을 띠는지 봐야할 것 같네.
비동기로 되는 건 맞다. 근데 이거 댓글별로 비동기면 대댓글을 안 받아올 경우에는 거의 같은 속도로 된다는거니까 대댓글을 대댓글 보이기 버튼을 눌렀을 때 받아오게 하는 게 어떨까?

지금 댓글들을 처음 불러올 때는 비동기로 댓글들을 동시다발적으로 불러와서 거의 같은 속도로 로딩된다.
로딩된 댓글의 개수를 세던가 해서 로딩하는거 넣어도 될 듯?
그리고 이제 대댓글도 대댓글을 불러온다고 했을 때 동시다발적으로 불러온다.
*/

/*
커버 이미지 누르면 유튜브 영상으로 이동하는 기능도 만들었는데 시뮬레이터 특성상 막히는것 떄문에 시뮬레이터에서는 잘 동작하지 않는다. 하지만 이건 시뮬레이터기 때문에 있는 문제점이기 때문에 실제 앱에서는 잘 동작할 것이다.
*/

/*
이제 댓글 표시는 끝났고 댓글 등록, 대댓글 등록을 하면 된다.
대댓글과 달리 댓글은 좋아요순으로 정렬할건데 새로운 댓글을 추가할 때는 당연히 좋아요가 0이므로 comments의 맨 뒤에 넣고 어떤 댓글에 좋아요를 표시할 때 좋아요 수를 늘림과 동시에 정렬을 하고싶다.
그래서 그 떄 댓글 번호 리스트를 받고 그걸로 for을 돌리는게 아니라(시간문제) 아예 comment의 snapshot을 get해서 거기에서 index로 각 댓글들을 비교하는것이 좋겠다.

근데 그러면 그냥 댓글도 처음에 받을 때 snapshot으로 하고 받으면 더 간단한가? 싶지만 어차피 비동기이기 때문에 별 차이 없을 것 같다 나중에 완성되면 이정도 속도는 그 떄 높이는걸로 하자.
*/

/*
로딩할 때 글로벌 변수로 int loaded를 0으로 초기화하고 로딩하는 것 마다 loaded += 1을 하고 그게 로딩해야될 댓글 개수가 될 때 로딩바를 끄면 될 것 같은디?
로딩바를 딱히 안 쓰고 그냥 대충 안보이다 한 번에 댓글들이 다 보이는걸로 하는게 어떨까 싶음
*/

/*
지금 백엔드가 좀 꼬여서 백엔드를 0만 놔두고 초기화를 한 번 시켜야겠음 ㅇㅇ(유저는 남기고)
*/

/*
영상이 같은거랑 유튜브 url이 같은거랑은 다른 문제라서 그걸 일단 영상 고유코드만 보고
중복검사를 하게끔 만들었고 그 오류때문에 중복카운트된 걸 지우려고 db에서 노래랑 댓글 부분을
0인 애들(틀)만 남기고 초기화했음

근데 아직 테스트는 안해봐서 이거 테스트해야하고

그다음에 댓글기능도 평점까지 반영되게 했는데 아직 그 좋아요랑 신고는 구현 안 했다.
어차피 새 댓글의 좋아요수는 0이니까 그냥 맨 끝에 넣기만 하면 돼서 정렬 안함.
그러니까 이제 댓글 쓰고 노래 추가해보면서 db꼬이는거 있는지만 확인하면 될 것 같다.


db는 안 꼬이고 잘 짜여졌는데 이게 너무 타이트하나보니까 db를 내가 직접 건드렸을 때는 꼬이기
쉬울 것 같다.

이제 대댓글 쓰는 걸 하면 된다.


시뮬레이터에서 텍스트 입력할 때 시뮬레이터에서 키보드 쓰고싶으면 cmd + shift + k누르면 된다.

이제 db도 딱히 안 꼬이는 것 같고 지금 있는 기능들은 안정적인 것 같다.
이제 대댓글 버튼 누르면 바로 쓸 수 있는 기능까지 만들었으니
대댓글 추가하는 기능을 만들면 되는데
comments에 comment로서 추가하고 reply는 가지지 않는 것들은 어차피 더미변수이므로
별 필요 없지만 통일성을 위해 그냥 빈 걸 넣어주자.
그리고 이제 대댓글은 좋아요같은거 없다. 신고는 필요할 수도 있으니 넣어두자.
그러면 그 다음 댓글 좋아요 기능에서 좋아요 누르면 댓글 다시 정렬하고(comments_numbers를 정렬하면 될 듯 하다) 다시 보여주는것까지만 하고
그 다음 댓긇이랑 대댓글 신고 많이 먹은것들을 예외처리 해줘야하는데
귀찮으니까 그냥 comment위젯이랑 reply위젯에서 안보이게 만드는걸로 하자.
db에서 지우거나 하지는 말자 ㅇㅇ 귀찮으니까 
*/

/*
ui 디자인은 안그래도 디자인 어떻게 할지 막막한데 여기에서 툴까지 새로 공부하면 머리 깨질 것 같아서
그냥 그림으로 그리고 피그마는 나중에 쓰던지 해야겠다.
*/

/*
노래의 rating이 int이다가 double이다가 해서 toString으로 문자열로 바꾸고 double.parse로 double로 만들어줬다
댓글의 rating은 무조건 int이게 만들어놨다.
대댓글 추가하는것까지 만들었고 db꼬이지는 않는 것 같다
이제 댓글에 좋아요 눌렀을 때 댓글 재정렬 하는 걸 만들고있는데
좋아요 누르면 그 노래의 댓글 목록을 가져와서 그 목록들의 좋아요수까지 List<set>으로 만들어놨으니까
그거 좋아요순으로 정렬해서 댓글 순서만 songs에다가 고쳐서 저장해주면 될 것 같고
위에 써놨듯이 신고수에 따라 안보이는거는 위젯 자체에서 처음에 신고수 받아오고 만약에 몇 이상이면
build에서 위젯 리턴 안하고 그냥 바로 리턴해버리는 식으로 구현하자

노래에 앱 자체 좋아요수같은거나 최근 댓글 평점 뭐 이런거 넣는게 좋을 것 같아서 그런거 하려면 db초기화는 한번 해야겠다 ㅇㅇ
2025.04.20
*/

/*
생각해보면 
song screen - 꿑
music add(확인필요) - 없음
comment widget - 없음
reply widget - 없음
만 체크하자
*/

/*
child위젯에 stateful위젯 있을 때 setstate이상한 거 해결했고 그거 옵시디언에 써놨다.
좋아요 누르는 것 까지 만들었는데
막상 하고 나서 보니까 이렇게 저렇게 덮어쓰기 하면서 데이터베이스에서 문서들 순서가
댓글 번호랑 달라서 comments를 통째로 가져와서 인덱스로 그 번째수의 댓글에 접근할 수가 없어졌다.
내가 보기에 댓글을 덮어쓰는 형식 말고 그냥 업데이트 하는 식으로 바꾸면 괜찮을 것 같은데
그렇게 안 하면 그냥 다 comment%d로 받아와야 하는데 그러면 너무 오래걸릴 뿐더러
이렇게 데이터베이스를 짠 이유조차 없어지기 때문에 그 방법은 최대한 피하고 싶다.
그러면 이제 데이터베이스 한 번 청소 하고
데이터베이스에 문서 새로 넣은 후에는(좋아요, 대댓글같은거 넣거나, 댓글 뿐만 아니라 노래 데이터베이스도) 건드릴 때 덮어쓰지 말고 제공되는 업데이트 메소드로 업데이트 하게끔 바꾸면 될 것 같다.
근데 그러면 체크해야되는 파일들이 db를 건드리는 모든 파일이라 좀 할게 많긴 하다.

2025.04.30
*/

/*
그게 아니였다.
그냥 덮어쓰기만 해도 자동으로 저장되는건 맞으나
파이어베이스 콘솔에서 문서를 정렬할 때 문자열로 보고 정렬하다 보니
comments19가 comments2보다 앞에 가게 된 것이다.
그러면 파이어베이스에 저장하는 정렬방식을 바꿔서 할 수는 없나?

그런것 보다 그냥 컬렉션 전체를 가져올 때 가져오는 순서를 정하는 방식은 어떨까?
이 쪽이 좀 더 보편적인 것 같다.



(아직 수정 못 했기 때문에 이제 해야 하는 부분.)
한 음악 스크린을 보고있는 두 사용자가 댓글을 추가했을
한 명의 화면에서는 업데이트가 되어도, 나머지 한 명은 그 업데이트를 볼 수 없다 -> 여기까진 ok
그런데 그 상태에서 댓글이 추가된 것이 반영되지 않고 그냥 처음 그 화면을 킬 때 받아왔던
songInfo대로 보고 거기의 commentList에 새 댓글을 추가하면 다른 사람이 썼던 
댓글은 적용되지 않고 없어진다.

이 문제를 해결하기 위해서는 댓글을 추가할 때 등, songInfo를 직접적으로 조작할 때,
한 번 songInfo를 다시 받아오고 작업할 필요가 있다고 생각한다.
그러면 다른 한 사람의 댓글 추가내용을 받아온 후 작업할 수 있곘지.
댓글에 좋아요를 누르거나 대댓글을 작성하는 경우도 체크해보자.
*/

/*
지금 orderby로 불러오기 위해서 number을 추가해줬다.
하나하나 보면서 number순으로 가져오고 데이터 넣을 때도 number추가해서 넣게끔 해놨는데
이게 되는지 테스트는 아직 안 해봤다

밥 먹고 다시 할건데 일단 데이터베이스에 그동안 있었던 데이터는 다 지웠다(user은 별로 없어서 수작업으로 number추가함)

집가서 내 종이 노트에도 바뀐 데이터베이스 구조 반영해서 수정해야겠다.
*/

/*
씨발 이게 한 번에 되네 개나이스
평점기능 성공, 좋아요기능 여러 댓글에서 성공, 대댓글 성공, 댓글 추가 성공
*/

/*
빌드 안에 있던 getInfo랑 그 안에 있는 SetState떄문에 무한 재귀 되고있었다.

근데 유저 경험이랑 속도 생각해봤을 때 누르면 바로 하트가 추가되는 것 까지는 맞는데 그걸 바로 반영하고 정렬하지는 않게끔 하는건 어떨까
왜냐면 댓글 두 개 거의 동시에 추가하는 건 유저 둘이 필요하기 때문에 별 문제가 안 되지만
하트는 그냥 한 명이 쭉 쭉 눌러버릴 수 있기 때문에 ㅇㅇ
하트를 누른다고 해서 그 하트에 의한 하트순이 바로 적용될 필요는 없어 보인다.


그러면 likedFunc에서는 데이터베이스에서 좋아요 1 추가 하고 그 다음 하트에 불 들어오고 좋아요 수 화면에 반영되는 정도만 하고, 정렬은 그 음악 스크린을 나갈 때 한 번 그 음악에 대해 정렬하는 걸로 하면 어떨까
그런데 그 과정에서 동기화 되지 않는 도중 다른 사람이 추가한 댓글이 있을 수도 있으니까
한 번 싹 다 새로 받아와서 정렬하는걸로 하자.

그러니까 빌드 안에 있던 get comment info는 없애는 걸로 하자.
그러면 상대편 측에서 댓글을 추가하거나 내가 댓글을 추가하는 건 알 수 있다
(어차피 새 위젯이니까 initstate)그러나 setState로는 한 댓글 안에서의 변경점은 바뀌지 않을 수 있다
(setstate의 영역).
정렬도 불가능 하다.

상대 쪽에서 song스크린을 나가면서 데이터 베이스에 변화를 줘도, 그 즉각적으로 뭔가가 
이루어지지는 않는다 왜냐하면 어차피 그건 songs의 영역인데 그건 songWidget에서만 쓰기 때문.
그렇기 때문에 별로 영향이 없다.

원래 있던 (old)likedFunc와 그에 관련된 것들 전부 주석처리 해놓았고 
build에서 getInfo하는것도 없앴다 윗윗 문단에 그 이유 쓰여있으니 보면 된다
주석처리 하는것들 히스토리 보게 깃허브 하는것도 좋을 것 같기는 하다.
빌드 안에 있던 getInfo는 원래 정렬한 것 적용하는 용도였으므로 이제 없애줘도 상관 없다.
새로고침은 불가능하게 만드는게 속 편할 것 같다.
이제 exitFunc에서 db에 있는 댓글 순서 정렬만 하면 댓글기능 정말 끝날 것 같다
그 다음에는 이제 신고기능 하고 그러면 이제 홈스크린 만들러 가면 될 것 같다.

getsonginfo를 db건드리기 전에 항상 해주므로서 db가 꼬이는 것은 방지할 수 있지만
전에 겪었던 initState와 SetState의 차이 문제로 db가 바뀌는 게 화면상에 전부 적용도 안 되고 꼬일 가능성은 있다. 하지만 애초에 이런 일이 벌어질 가능성이 적기 때문에 화면 꼬이는 정도는 그냥 나갔다 들어오면 된다고 하고 넘길만 한 상황인 것 같다.

2025.05.07
*/

/*
위의 로직대로 페이지를 나갈 때 댓글 정렬하게끔 했다.
더블탭하면 전 화면으로 가는데 이건 나중에 바꿔도 될 듯
ㅇㅋ 이제 댓글 정렬까지 됐으니까 엄밀한건 나중에 더 따지는걸로 하고 일단 songScreen은 이쯤 하고 넘어갑시다
좀 속도 붙여야제
2025.05.20
*/

/*
하단 네비게이션 바 만들었음 그리고 globals에다가 가장 최근에 봤던 song의 정보를 songScreen exitFunc에서 저장했다가 다시 불러올 수 있게 해놨음.
이거 info는 다시 받아오게 하는게 맞을 듯 변경사항이 로딩이 안 됨. -> 수정완료
2025.05.29
*/

/*
유저별로 어디에 댓글 달았는지 저장하는 users -> usern -> commentd_songs 배열 만들었음.
이제 이걸로 어디에 댓글 달았는지 프로필이나 댓글 중복달기 방지 등등 만들면 될 듯.

하단바에서 페이지 이동할 때 애니메이션 추가할 수 있게 바꿔놨음. 나중에 애니메이션 넣으면 될 듯.


검색할 떄 거기에 뜨는 노래 위젯은 무조건 stateless로 해야한다.
stateful로 해서 거기서 정보 받으면 또 저번에 댓글 순서정렬처럼 아작이 나버릴 수 있으니
searchScreen init에서 받은정보로 그냥 stateless위젯만 뜨게 하는걸로 하자.

검색 기능도 구상대로 잘 만들어지고 있다. 일단은 검색어에 맞는 것들 리스트업 해서 보여주는 것 까지 했다. 이제 노래 보여주는 거 누르면 song으로 들어가는 위젯으로 만들고 (stateless) 그 다음 없으면 추가하는 것 까지 만들면 될 듯.

근데 검색 로직에서 hebi 늘 <<이런식으로 검색하면 hebi늘 << 이게 포함되는지 보니까 못 찾음.
이걸 어떻게 해결할지 봐야할 듯.
아티스트 이름이나 노래 제목 둘 중에 하나만 쓰라고 하면 되려나??
아니면 어차피 제목으로 검색하는데 그냥 둘 다나 둘 중에 하나만 걸려도 되게 할까?
근데 그러면 곡 제목에 띄어쓰기 있는 경우는 어떡하지.
한번 생각해봐야할 듯.
2025.05.30
*/

/*
일단 상술한 검색엔진 문제는 아직 해결하지 않았다.
검색했을때 노래 위젯이 나오도록 했지만 tap시에 unfocus되는것과 노래를 클릭해서 들어가는 것을
아직 어떤식으로 구분할지 모르겠어서 해당 페이지로 넘어가는 건 구현하지 못 했다.
-> 근데 어차피 unfocus밖에 없으니까 그냥 unfocus시에 검색하는걸 빼고 그냥 이동이랑 동시에 되게 하면 되겠다.
*/


/*
검색화면 완성했다

근데 생각해보니까 한 사람이 댓글 좋아요 여러 번 누를 수 있잖아. 이걸 우쨰.
user에 likedcomment를 저장하게 만들었다.
그리고 이제 댓글 위젯에서 조회해서 하트 눌렀으면 안되게끔 하면 될 듯.

-> 좋아요 누르는거랑 취소하는거 만들어놓음
*/

/*
홈화면 관련된 건 기본적으로 memo.dart파일에 더 자세히 적혀있다.

홈화면에서 정렬된 것들 볼 수 있는 위젯 하나 만들고 큰 음악 위젯도 하나 만들었다.
최근 댓글, 등록 이런것들 해놨는데 db순서랑 보여줄 순서랑 반대다.

넷플릭스나 음악 앱 처럼 처음 들어갔을때 맨 위에는 좀 다른 형식으로 크게 음악들을 보여줄 수 있었으면 좋겠다.
어떤걸로 하는게 좋을까

db에서 orderby로 애들을 정렬해서 가져올거면 코드를 병렬적으로 짜야할 것 같고(로딩속도를 위해 await이 한 함수에 많이 쓰이는 것을 방지.)
아니면 가져와서 정렬할거면 songsInfo를 가공해서 구현해야할 것 같은데 아무래도 코딩의 편의성으로 보나 속도로
보나 가져와서 정렬하는게 빠를 것 같아.

리스트는 이름 자체가 포인터라서 이름으로 그냥 =을 써버리면 두 개가 연동이 되어버린다. 카피를 하자.
*/

/*
홈스크린은 회전목마 슬라이더 패키지를 사용해서 맨 위에 포스터 형식으로.
홈스크린 관련된 건 memo문서로!
홈스크린 끝!
2025.06.15
*/

/*
2025.06.15
이제 songScreen의 ui를 개선하면 될 것 같다.
songscreen의 곡 상태를 위쪽에서 보여주게 만들었다. 배경사진의 opacity가 black을 기반으로 만들어졌기 때문에 절묘한 흰색이 아닌 그냥 흰색은 구분가능하므로 글씨를 흰 색으로 만들었다. 
글씨가 너무 길어질 걸 염두해 조회수는 만 단위, 좋아요는 천 단위로 끊었다.
유튜브로 보내주는 기능은 잠시 덜어내었다.

이제 댓글관련 ui개선하고 검색엔진 고민해보고 url로 노래 추가하는 화면 ui 개선하고 신고기능 만들고 회원가입 화면 접근가능하게 만들고 화면간 로딩이나 페이지 이동 관련된 애니메이션만 추가하면 끝날 것 같다.
근데 아티스트 별로 노래 분류해서 보여주는거 별로 안 어려울 것 같은데 search하던거랑 똑같이 해서 만들어놓으면 어떨려나? songscreen이랑 같은 쪽으루다가 ㅇㅇ
homescreen에서 infoby정렬에 songsInfo만 그 아티스트의 노래들로 바꿔치기하면 매우 간단히 이쁘게 만들 수 있을듯.
*/

/*
아 근데 songscreen에서 대댓글 보기 누르면 유튜브처럼 그 댓글을 위주로 바뀌는 것도 조흥ㄴ데
인스타 스타일로 그냥 보이게 만드는것도 좋다.
*/

/*
그냥 fullcommentwidget을 만들어서 페이지 맨 아래에 텍스트필드를 배치하는 걸 했는데
이거 키보드 나오면서 오버플로우가 난다.
위에 있는 댓글들만 스크롤 가능하게 해서 해결하고싶은데 어떻게 해야할지 모르겠따 ㅋㅋ
댓글 ui로 엄청 애먹네, 홧팅이다 양현아.
2025.07.03

-> 개똥꼬쇼 해서 오버플로우 안나게 막았다. 동등한 깊이의 트리에서 expanded를 써서 대댓 위젯들한테 할당하는
높이 자체를 expanded로 감싸니까 해결됨
이제 대댓글 위젯이랑 텍스트 필드 다듬으면 되겠다.
*/

/*
아이콘 버튼, 텍스트 버튼 둘 다 터치시에 주변에 표시되는 그것좀 없애자
*/

/*
텍스트필드 디자인 다시 하고
별점 남기는 거에서 터치로 별점 조절하게 했다
내가 단 댓글이 최상단에 한 번 더 보이게 했다.
댓글 입력할 때 바로 unfocus되고 텍스트 필드 지워지게 바꿨다.(딜레이 최소.)
이제 로그인이랑 로딩만 어떻게 하고 유저 화면 만들면 진짜 끝날 것 같다.
*/


/*
로그인 페이지 ui 다듬었다.

내가 원하는 사람의 댓글을 최상단에서 한 번에 볼 수 있게 songScreen에서 내 댓글 보여주는걸
target을 정해서 보여주는걸로 바꿨다.

bottomnavigationbar을 위젯으로 묶었으나 songScreen에서는 exitFunc때문에 묶지 못했다. 
따라서 bottomnavigationbar을 바꿀 때 위젯 파일과 songScreen 둘 다를 바꿔야 한다.

처음에 로그인 페이지로 가게 수정했었으나 너무 귀찮아서 패스 ㅎㅎ 나중에 하는걸로!

유저 페이지 만들고 있다. comment위젯 수정해서 이름 누르면 그 사람의 페이지로 가게 만들자.

유저 페이지에는 그동안 댓글을 달았던 음악위젯들이 나오는데 그걸 누르면 target을 해당 유저로 해서
songScreen으로 가게 만들자.

아이콘 쓰려고 폰트어썸 깔았다.

bottomnavigationbar에 유저를 추가하자.
만약 유저페이지의 유저가 로그인된 유저와 같다면 로그아웃 버튼이 생기게 만들고 로그아웃하면 바로 
로그인 화면으로 보내자


bigMusicWidget을 썼으니까 targetuser을 넘겨줄 방법을 생각해야한다.
*/

/*
생각해보니 songScreen을 setState할 때 commentWidget의 getInfo가 다시 되지 않아서
내가 좋아요랑 정렬을 그렇게 다시 만들었던 거였다. 타겟유저의 댓글을 저렇게 한 번 더 보여주는 건 문제가 있다.
왜냐면 댓글을 달았을 때 이상해지기 때문.
그러면 어떻게 해야할까?
타겟유저의 댓글은 최상단에 원래 있던 댓글 리스트를 "정렬해서" 끌어올린 후에 빌드한다.
그 후에 새 댓글을 달면 그건 어쩔 수 없이 최 하단으로 가는걸로 해야될 듯 하다... 어쩔 수 없나?
좀 기분나쁘긴 하네.

그러면 그냥 songScreen에서 하는 commentWidget을 Stateless로 돌릴까? 또 그러고 싶지는 않아.
그러면 어떻게 해야할까
원래 있던 위젯을 다시 빌드하는게 문제잖아 지금, 그러면... 정렬해서 빌드하고 내 댓글은 나중에 추가하면... 안되나?
왜냐면 원래 있던 위젯에 번호를 바꾸는 건 적용이 안되지만 아에 쿼리에 없던 위젯을 넣는건 가능하니까

그러면 맨 위에 내 코멘트
중간에 타겟 코멘트(그냥 순수 정렬로)
마지막에 그냥 일반 코멘트

이렇게 넣자.

그리고 나서 타겟,일반 코멘트를 표시하는 전체 위젯에서는 내 코멘트를 제외하면 되는거지...
오...

순수 정렬 어려워서
타겟댓글들(타겟!=나)일 때만
내 댓글들
전체 댓글들
이렇게 있는 상태에서

보여줄 일반 댓글들(commentsToShow) = 타겟댓글들 + (전체댓글들 - 타겟댓글 - 내 댓글)
을 매번 구해서(간단한 for문) 표시하고
맨 위에 내 댓글들 표시하게 만들었다.



이래도 안되네... 그냥 그 자리에 있던 댓글 취급해버림.
결국 새로 들어가는 건 맨 아래에 추가되는거 말고는 같은 취급이라는 샘


그러면 결국 새로 로딩, 즉 initState를 해야한다는 것이다.
그러면 loadCount라는 전역변수(글로벌)을 만들어서 


원래 문제는 매개변수는 다시 전달이 잘 됐는데 그 위젯이 새로 그려지는게 아니라 원래 있던 댓글위젯에
값만 바뀌는 원리라서 바뀌었을때 getInfo, 즉 initState에서 들여오는 정보는 다시 로딩되지 않는다는것
그러면 매개변수가 변한걸 감지하면 되잖아?? 
그래서 build를 실행할 때마다 위젯의 매개변수랑 getInfo에서 받아왔던 정보가 일치하는지 검사하고ㅗ
아니면 getInfo에서 다시 받아오ㅗ게 바꾸었다.
commentWidget build 에서 dd


그리고 유저페이지 전용 음악 위젯 하나 만들어서 썼다.
중간에 one last kiss에서 뭔가 db가 꼬인 현상이 발견됐는데 거기서만 그런 것 같아서 그냥 넘어갔다.


아 url검색 페이지 ui!!!!    까먹고있었다 ㅎㅎ


지금 유저페이지 완성했고 바텀네비게이션 바에 유저페이지도 추가했다.
songScreen에서 있었던 댓글문제도 이제 해결했으니까 ㅎㅎ
댓글에서 유저 이름 누르면 그 유저의 유저페이지에 들어갈 수 있게 해놨다.
바텀네비게이션바에서 누르면 무조건 로그인된 계정으로!

처음에 로그인하게 만들면 완벽할 것 같고, 필요에 따라서 유저화면에서 내 화면이면 로그아웃 가능하게 하고
sharedPref써서 로그인한 게정 저장하는것도 나쁘지 않을 것 같다.
이제 진짜 붙여넣기 화면 ui랑 유저화면 ui, 로딩바 빼면 아무것도 안 남았다 힘내자!!

2025.07.13
*/

/*
로딩할때도 앱 전체의 안정적인 느낌을 위해 bottomNavigationBar은 남겨놓는 편이 좋겠다.

여러가지 로딩화면을 생각해봤지만 생각보다 로딩 속도도 빠르고 오히려 로딩바가 더 별로일 것 같아서 그냥 뒀다.
songScreen에서 textField위치 튀는것만 잡아주고, userScreen에서 프로필만 좀 미리 로딩하게 만들었다.
commentWidget에서 로딩되면 위젯을 보이고 아니면 그냥 빈 텍스트를 보여주는걸로 했지만 크게 바뀌지는 않았다.

완성이다.
*/


/*
commentWidget에서 로딩되면 위젯을 보이고 아니면 그냥 빈 텍스트를 보여주는걸로 했지만 크게 바뀌지는 않았다. <<- 이것때문에 앱이 좀 끊긴다. 그냥 뭐라도 보여주게 해놓자 ㅋㅋㅋ.

근데 이거... 댓글창 움직이는게 너무 끊기고, 로딩되는게 하나씩 로딩되니까(윗줄 영향)좀.. 짜친다.
그러면 위에서 아무것도 안 보여주는 대신에... 어떻게 할까?
아직 고칠점이 많이 남았다, 열심히 하자 양현아!
*/


/*
댓글 로딩되는거는 맨 처음에 아예 백지 상태에서 로딩할 때만 비어있게 만들었는데 아직도 살짝 딜레이가 있는듯
키보드 자체는, 이게 왜 딜레이가 발생하는지 모르겠는데, 대부분의 앱에서는 이걸 그냥 위에 있는것들의
크기를 줄여서 키보드 공간을 확보하는 식으로 하나보다.
내가 하려던 방법으로 하려면 singlechildscrollview랑 주로 같이 쓰는 것 같은데 그건 내가 원하는게
아니니까 ㅇㅇ
그래서 크기 조절하는데 저기서 키보드 크기 구하는법 보고있었다.
줄였을때 어디가 남아서 보이느냐는 확인해봐야할 문제다.
이제 이 두 개 고치고, 인트로 스크린에 로고 박고(ith아이디어 생각해보자), 아이콘에 로고 박으면 될 것 같다.



그니까 지금 문제는 레이아웃이 변하면서 보이는것과 안보이는 것 setstate안에 있는 commentwidget들이 계속 setstate, initstate되면서 프레임드랍이 되는거임.

그러면 보이는거 안보이는거 상관 없게 singlechildscrollview를 쓸까?


아근데씨발 잠깐만 이거 조회수랑 좋아요수 갱신이 안되잖아...
-> 그거는 이제 관리자용 앱을 하나 만들어서 하루마다 다시 갱신하게 바꾸면 될듯.
모든 노래들 쭉 돌면서 정보 다시 받아서 저장하는거 어려운거 아니잖아.
*/

/*
어쩔 수 없다... commentWidget을 갈아엎는 수밖에.
사실 이제 대댓글 기능도 없으니 그냥 stateless로 만들어도 별 상관 없기 때문이다.



지금 댓글 위젯을 다 stateless로 만들어서 렌더링 부담을 줄였다. 그 덕분에 많이 부드러워 졌다.
그런데도 조금의 랙이 있는 이유는 아마도 expanded때문일 것으로 추측한다. 따라서 이 넓이를
animatedpadding 혹은 그냥 sizedbox로 만들면 어떨까 싶다.

-> 근데 사실 이미 충분히 부드러워서 굳이긴 하다 ㅋㅋ
*/


/*
admin screen만들어서 노래 업데이트 문제 해결했다.
내가 그냥 수동으로 하루에 한번씩 돌려주면 될 듯.
로그인화면, 그냥 시작화면(회원가입은 x) 에서 계정이 0번째 유저, 즉 어드민의 계정이면
어드민 스크린으로 보내준다. 따라서 바텀네비게이션바에서 다른 곳으로 이동도 가능하고, 바로 로그아웃도 가능하다.


이제 충분히 부드러워졌고, 잔버그도 다 고쳤다.
이제 진짜 인트로 스크린이랑 앱에 로고 박고 리포트 수 일정 이상이면 안하는것만 하면 될듯.
그 코멘트 자체는 존재하는데 그게 빌드되지는 않는거임.
노래나 코멘트를 빌드하는 단계에서 걸러주면 될 것 같고, 자세히보기 코멘트 위젯은 안해도 될듯. -> 끝


근데 대댓글 기능에도 저거 다 댓글위젯에 해줬던거 해줘야할 것 같은데...
-> 했음 ㅋㅋ
그러면 대댓글도 안정화 됐고...

그러면 이제 진짜 인트로 화면이랑 아이콘에 로고만 넣으면 끝이네
내일 하자
2025.08.07
*/


/*
몇몇개 화면은 좀 화면 이동 애니메이션을 넣자.
근데 대댓글 기능 좀 ui도 그렇고 아쉬운데 그냥 뺄까?



근데 이거 키보드 애니메이션 끊기는게 디버그모드라서 그렇다는 말도 있네,


일단은 대댓글을 덜어내는게 맞는 것 같네...
근데 ui적으로 봤을 때 저기에 회색 라벨이 있는게 더 좋기는 해.
-> 자세히보기 버튼으로 바꾸고 대댓글 기능을 아예 삭제했다.

댓글 위젯을 stateful로 바꾸니까 또 키보드 애니메이션 ㅈㄴ느려져서
그냥 stateless로 두고 글로벌 변수 써서 부모 setstate시키는걸로 했다, 보면 알거임



페이지 옮길 때 네비게이터에 계속 추가만 하니까 네비게이터에 계속 페이지가 쌓여서 성능이 저하되는 것 같다.
지금 키보드가 페이지 이동을 많이 할수록 버벅이고있다.


내 가설이 맞았고, push대신 pushreplacement를 사용해서 해결했다, 근데 orderedsongs보는 그 화면은
돌아오기 편하게 만들기 위해 그냥 push로 남겨두었다(pop을 위해)
그러면 조금씩 쌓이기는 하지만 전만큼은 아니다.
만약에 저기도 바꿔버리고 그냥 페이지라우트로 하면 홈화면으로 올 때 로딩이 필요해져버린다.

앱 안에서 하는건 다 끝난 것 같다(인트로 스크린이랑 로그인관련만 만지면 된다.
인트로랑 로그인 관련도 끝냈다.
그러면 이제...
인트로 화면에 로고 박고, 홈 화면 로딩될 때 ui만 좀 다듬으면 진짜 끝이다.


홈 화면 로딩될 때 부드럽게 만들기 위해 preload를 global변수로 만들어서 사용했다.
searchscreen에서도 home에서 만든 preload를 사용하게 만들었다.
들어와서 preload하기 전에 search로 가면 문제가 되기는 한다. 그래서 비어있다면 받아오게 만들었다.


근데 그러면 songScreen갈 때는 preload못 쓰나? 어차피 이미 보이는것들로만 이동할거고, 그렇지않은
음악추가화면에서는 원래대로 가면 될 일. 어차피 home으로 가는 gap보다 빠르게 업데이트 되지 않을 것이다.
근데 내가 songScreen에서 바꾼 정보는 저장되지 않는게 흠.
그러면 songScreen에서 바꿀수있는게 댓글달기밖에 없으니 댓글을 달 때 preLoad를 갱신시키면 될 일.
그러면 preload를 쓰자.


따라서 home, song, search 세 스크린에서는 preload를 공유하고
주기적으로 homeScreen에 갈 때마다 갱신
search에서 비어있다면 갱신.
song에서 댓글이 달렸을 때 갱신(하트같은건 comment의 영역이므로 ㄱㅊ)


오키 이제 그러면 화면 이동 부드러워지는거 다 했고
음악 추가하는 스크린이 좀 거슬려 사실은. 좀 더 부드럽게 만들거나 해보자. -> 어쩔 수 없는 것 같다.

저 commentWidget 하트 누를때마다 꿈틀꿈틀 하는것때문에 commentWidget 크기 고정하려고 하고있다.
-> 저기서 좋아요수가 가질 수 있는 단위를 만들까...?
그니까 총 4칸을 할당해주고 그만큼을 그냥 sizedbox로 감싸.
그리고 대신에 1000, 5000, 1.9만, 10만, 100만 이런식으로 그 안에서 처리하게 만드는거지


씨발
저거 하트 여러번 다다다닥 누르면 씨발 여러번 카운트되네 씨발

근데 이걸 어떻게 방지하느냐...
한번 눌렀을 때 그걸 바꾸는 중인 상태로 만들고 그동안 하트 요청을 안받아버리는 방법이 있기는 한데
그러면 이게 문제가 한번 누르면 거의 1초 가까이 다시 하트를 누르지 못 한다는거고, 
그러면 사용감이 구려질수밖에 없음

그러면 어떻게 해결해야하는가...
근데 이게 어차피 stateless기 때문에 하트를 누르면 결국 다시 그려질 수밖에 없음.
흠.....
그러면 한 번 그려졌을 때 한번만 바뀌게 하는걸로? -> 그리고 변수는 어차피 한번 호출되는
build 에서 지역변수로 해줄 수 있었다!

근데 await을 해버리니까 너무 느려지기는 하네
*/

/*
commentWidget에서 다시 받아오지 않았는데 왜 되지? 했는데, 깊은복사, 얕은복사 때문이였다
-참조
하지만 플러터의 경우 String, 숫자형, bool, null 과 같은 기본데이터타입(단일형)을 제외한 모든 객체의 복사는 Call by reference 가 기본인 듯 하다. (Class, List, Map 등)

아냐 그냥 어떻게 할거냐면 위제ㅔㅅ에서 사용하는건 다 preLoad를 사용하고
호ㅘ면에 보이는거랑 별개로 그냥 백그라운드에서 firebase에 저장하는걸로, 
딱히 다시 불러오거나 하지 않는걸로 하자.
근데 그러면 다른 사용자가 사용하는거랑 겹치면 잘못된 덮어쓰기 때문에 오류가 생길 수 있어.
그러니까 백그라운드에서 저장할 때는 어차피 급할거 없으니 한 번 다시 불러오고 추가해서 저장하는걸로 하자.
그리고 가끔은 다시 불러오기도 해야하니까(동기화)
그럼 어떻게 해야할려나.... 그 타이밍을 잡아야해.
그러면 그 타이밍이 언제가 되면 좋냐?
그냥 homeScree이랑 searchScreen에서 하는걸로 하자.
근데 거기서 song을 다시 하기는 좀 그런데?
아냐 근데 어차피 home에서 기본으로 song을 한번씩 하고 하니까...
사실 song 업데이트 하고 commentUpdate는 아무상관 없는데, 반대면 song에서 업데이트되지 않은 댓글을 참조해서 rangeError이 날 가능성이 있어.
그리고 comment를 추가할 때 내가 보이는 화면에서의(preLoad) 댓글번호랑 실제로 되어야할 댓글번호랑
다를 수 있어. 왜냐면 동기화 안 한 그 gap에서 댓글이 추가될 수 있기 때문에. 근데 그러면 그냥 두개 다른체로
두지 뭐. 각자 안꼬이게만 하면 된다. 근데 그러면 받아올때는 괜찮은데 쓸 때 엄청 각별히 주의해야됨.
그러니까 쓰는 환경이 몇개가 있냐,
노래 -> 추가할 때, 댓글이 새로 달릴 때
댓글 -> 댓글이 새로 달릴 때, 좋아요가 눌릴 때
유저 -> 새로 추가될 때, 좋아요를 누를 때, 댓글을 달 때.

결국 데이터를 투 ㅌ트랙으로 관리하겠다는 선언이나 다름없으니 정말 더 더 열심히 해야돼...

오늘 이거 다 끝내고 저기 인트로스크린만 손보고 정말 끝내자 진짜.

preload가 글로벌 변수들이니까 그걸 동기화하는것도 글로벌 함수로 놓자.



preLoad는 Home - initState에서 한 번 업데이트. 전부 다.
그럼 이제 다른데에서도 그냥 계속 preLoad를 쓰게 만들면 된다.
일단 HomeScreen부터? -> 아 귀차나 Home은 어차피 문제 없는데 그냥 쓰죠? ㅋㅋ
mostRecommend등등은 어차피 songsInfo만 있으면 그냥 도ㅚ는거라 굳이 그렇게 안불러오고 그냥 뽑아도
될 것 같은데?

그러면 Home에서도 처음부터 PreLoad를 사용하므로 반드시 intro에서 다 받아와야한다.
그리고 로그인시에는 user에 대한게 크게 바뀌니 반드시... 아니면 그냥 로그인시에 그냥 intro를 한번 더?
그리고 intro의 페이지 인애니메이션, 아웃애니메이션은 페이지 이동 애니메이션에서 페이드같은거 알아보자.


-> 인트로 스크린에서 받아오는거랑 유저가 로그인이나 회원가입 할 때도 preLoad쓰고 preLoad에 저장하게 만들었다.
회원가입이 좀 느릴수는 있지만... 뭐 회원가입이니까~ 확실하게 하려고 다 await달았다 ㅋㅋ

-> 이렇게 인트로에서 preLoad받고 사용하므로서 다시 좋아하는 아티스트를 최상단에 놓으면서도
빠른 로딩이 가능해졌다.

search는 별거 없으니까 이제
song이랑 useerScreen만 하면 되겠다. 아 그리고 음악 추가도 ㅎㅎ

preLoad써서 댓글 다는거 성공!! 
frontEnd랑 backEnd로 나눠서 했고, backEnd랑 frontEnd 모두 잘 동작한다.

그러면 이제 재정렬이랑(exitF) 좋아요기능 고치자.

exitF 고쳤다!! 이건 별로 바꿀거 없어서 편했음 ㅎㅎ
이제 좋아요기능 하고 userScreen 최적화 하면 preLoad사용 최적화도 이제 끝이다. + 음악 추가가 있구나
아 그리고 댓글 꿈틀거리는것도 ㅇㅇ... 아마 그냥 그 숫자를 sizedbox로 크기정하면 될듯.


근데 home에서 preLoad를 Update할 때 3개중 하나만 적용된채로 다른 스크린이 빌드되면 안된다.
그러니 값을 3개를 받아오되, 그걸 적용하는것은 셋 다 준비됐을 때로 하자.
그렇게 만들었다, 업데이트에 모드를 추가해서 바로 저장하지 않을 수도 있게 만들었다.

어차피 리퀘스트는 순차적으로 진행되게 되어있다,
만약 한명이 여러번 누르면... 흠.
그러면 어쩔 수 없이 매번 하는게 아니라 songScreen을 떠날 때 한번 일괄적으로 추가해주는 방식으로
해야겠다.

그래서 likedNew랑 unlikedNew를 둘 다 만들어서 하나씩 요청을 처리하는걸로
exitFunc에서 한번에 처리하자.
그러면 이제 한번 정보 받아와서 주루루루룩 바꾸고 저장하고 클리어하면 되겠네.
지금 딱히 바꾼건 없고 liked, unliked만든것 뿐.

여기서 like request를 처리하는 도중에 home에서 preloadUpdate를 할 경우 DB의 중간상태가 로드된다.
그래서 하트는 분홍색인데 숫자는 안오른 그런 형태를 만나게 됨.
순전히 속도의 문제고 처리하는 도중에 preload를 Update해서 생기는 문제이니
preloadupdate를 저게 처리중일 때는 예외적으로 하지 않는걸로 하기로 함.

그러면 preload만 변경된 상태로 그냥 보일것이니 ㅇㅇ.

사실 home에서 preloadUpdate 하는게 그리 자주 해야하지는 않다.
화면에 다른사람이 한게 안보일 뿐이지 내 화면에서는 fronend로 한걸로 보이기 때문에.
좀 느리긴 하지만 아무튼 됐다 ㅎㅎ. 느린 이유는 매번 업데이트 하기 때문...
그냥 바뀐것들만 한번 또 돌면서 해주자!

뭐... 정렬이 언제되냐 이런 문제는 있지만(왜냐하면 정렬이랑 like request가 동시에 진행되기 때문에
그러면 그냥 likeRequest를 먼저 하는걸로 하자.
어차피 정렬 느려도 된다.(크게 DB건들지 않음)


근데 이러면 songScreen에서 정렬을 너무 자주 못하는데?
그러면 이걸 그냥 타이머를 넣어서 하자. -> 5초마다 한번씩 업데이트하고 dispose할때 없애게 만들었다.

그러면 이제 좋아요 했고, 댓글 했으니까 유저스크린이랑 음악 추가만 하면 된다.

음악 추가할때 songsInfoPreLoad를 한번 다시 업데이트 하게 만들었다.


아니 그니까... 음악에서 정보를 불러올 때 안될 수도 있어, 그래서 그럴 때 어떻게 예외처리를 해야하는지
보는중인데 진짜 이거 왜 이러냐 ㅅㅂ 개처열받네


그럼 이제 음악 추가까지 끝났고, 뭔가 꼬여서 타이머로 초기화는 안했다.
아냐 그냥 타이머로 like request 끝날때까지 기다렸다가 하게 할까?
근데 굳이 그렇게까지 할 필요가 뭐가 있을까...
그냥 다른사람이 하는것만 안보이는건데
그리고 내것 추가될 때는 상대것까지 다 받아온 후에 추가하니까 뭐 별ㄹ ㅗ상관없다.

하... TLqkf 드디어 preLoad써서 최적화하기 끝냈다!!!!!!!!
그럼 이제 introScreen에 로고만 박고 인트로 애니메이션 만들면 진짜 진짜 찐찐막이다.


앱 폰에서 실행해봤는데 그냥 완벽하다.
진심 그냥 완벽하다
이제 그러면 댓글위젯 꿈틀거리는거랑 인트로 스크린 로고만 넣고 배포하면 될 것 같은데?


이미지 넣고 애니메이션까지 했는데 이미지 자체가 좀 마음에 안드네...
로고 이미지를 다시 화질도 좀 더 좋고 배경이 아예 하얀색이게 다시 만들 필요성이 있겠다.

일단 버전 1은 여기까지 하자.
그리고 나서는 해야될게 뭐냐면... 검색엔진을 좀 손봐야겠다. 웉붕이들이 사용할 수 있게 ㅇㅇ...
언어별 제목이랑 그런게 웉붕이들한테 중요할거고 그게 아니더라도 대충 한국어로 제목 썼을 때 
검색이 돼야 될 것 같다.
흠.... 그러하다.
가장 홍보하기 쉽고 내가 잘 아는 시장, 내수시장이라 꽉 잡을 수 있는건 웉갤이 유일하다.
한번 해보자 화이팅!!
*/

/*
앱 빌드는 xcode에서 runner 설정을 debug가 아니라 realese모드로 바꾸면 된다고 한다.
그러면 이제.... 그냥 앱 인트로랑 로고만 바꾸고 야무지게 사용하면 되시겠다.


로고도 좋은걸로 다시 바꿨고
인트로 스크린 잘 만들었고
코멘트 위젯 꿈틀거리는거 잡았고(그냥 sizedBOx박은거라 숫자 늘어나면 overFlow난다, 만약 나면
기쁜마음으로 고치자 ㅎㅎ)
그리고 자세히 보기 안되는것까지 잡았다.

이제 여행동안 잘 쓰고
예전에 달았던 댓글 나중에 report를 10이상으로 바꾸던가 하자.

이제 빌드해보자!!!!
*/


/*
이렇게 르브리스 vver..1이 완성되었긔...

그러면 이제 어떻게 해야할지 계획을 세워보자

일단은 지금 개선하고자 하는 포인트들은
0. 댓글 수정이 귀찮으면 삭제라도 가능하게 만들자. -> userScreen에서도 조회할 수 있게!!!
1. 햅틱이 없으니 뭔가 버튼을 누른건가~ 싶게 만든다
2. 지금 있는 댓글 수 자체가 너무 적다.
3. 댓글이 한줄만 보이니까 너무 감질맛 난다. 2줄은 기본으로 보이게 만들자.
4. 검색엔진 자체가 그냥 구리다.
검색법을 새로 만들어야겠다.



그러면 ver1.1에서 저기서의 1~3까지의 문제들을 해결하고 그 다음 사람들이 사용할 수 있게 만들자.
그리고 그 후에 검색엔진을 개선해서 ver 2 를 만들자.

흐으ㅡ으ㅡㅡ음....
그러는게 맞나?
그게 맞다 왜냐면 내 시간은 점점 없어질 것이고 어차피 db에 있는 정보 바꾸는건 admin 사용해서 하면 아주 쉽다.

그래 지금이 이걸 출시하기에 가장 적절한 타이밍이다.
근데 아쉬운게... 검색엔진을 아무리 안 바꿀거라고 해도 그래도 일본어 발음정도는 저장하는게 낫지 않을까?

그러면 이렇게 하자.
일본어를 쳐서 검색할 사람은 없으니...
일단 설명란 이제 안받아온다. 채널명과 색인으로만 승부!!
검색어 태그를 설정할 때
 */

/*
embedding key
openai api key
임베딩 키 : 
*/


/*
이것저것 알아봤는데, 그냥 api만들어서 해결하는게 앞으로를 생각해도 더 좋을 것 같네.
파이썬으로 내가 쓸 api를 만들고 하면 될 것 같어...

근데 일이 너무 커지니까 그냥 라이브러리 "딸깍" 해야겠노 ㅋㅋ

아니 라이브러리도 쓸만한게 없고 사실 임베딩도 즛토잇쇼같이 기괴한 씹덕체는 못잡아...
유튜브는 어느정도 잡는 것 같으면서도 완벽하지는 않고.

그냥 현실과 어느정도 타협을 해서
"같은 뜻"을 가진 세가지 언어가 가능하게 만들자.
그리고 이제 일본어를 영어로 쓰는걸 잡기 위해서 영어 입력은 번역을 한 번 돌리는것도...


번역이라는건 예로부터 딥러닝의 전유물이였거늘... 알고리즘이 있다고 해도, 그걸 보조할 뿐.
시1발!


흠......... 그러게.
*/


/*
검색엔진 다 만들고 돌아왔다.
그런데 이걸 합치는 과정에서 문제가 생겼다.
파이어베이스에는 이중배열을 못 넣네??
그러면 저장하는 구조를 searchtag1, 2이런식으로 아예 다르게 만들어야겠다.
*/

/*
구조 바꿨고, 어드민 스크린에서 다시 다 로드하는거에다가 새 검색엔진 넣었다.
비용 이슈가 있으니 나중에는 빼야하지만 지금 한 번 쭉 다시 하는데는 제격.
나중에는 새 노래 추가랑 댓글이나 좋아요 등 db에 접근하는거에서 바뀔 때 있는지 봐야겠다.

지금은 검색엔진에서 불용어 리스트나 프롬프트 수정하고 있다, 저기서는 다 못잡았던 케이스들이 나오는 중.
이런저런 몰랐던 케이스들을 다루며 꽤 많이 수정했다.
근데 이제 얼추 되는 것 같다. 연결도 다 끝남!
근데 dmp 문자열 비교하는 로직을 고쳐야겠다
PTJ랑 TSP는 전혀 다른데 이 두개가 2/3유사도이니...

아직 음악 추가는 테스트 안해봤고 거기 말고 또 어디에서 정보 바꾸는지 모르겠는데 아마 없을 듯 하다.
그래도 은근 성공적인듯.
이제 dmp비교 알고리즘 바꾸고 두 개로(음악제목이랑 가수로) 나누는거 구현하면 될 듯
아 그리고 api키 저거 경로 어떻게 좀 다시 봐야한다.
*/


/*
남은 할 일들.
0. 음악 추가할 때 새로운 검색엔진, 저장형식에 맞추기. -> 완.
1. 레벤슈타인 거리 써서 검색 성능 높이기. -> 완.
긴급!!! 짧은 단어, 한국어 로마자변환 등등에 대한 검색 성능 개선. -> 완
2. 곡과 가수로 검색어 두 개 구분하기. -> 완.
3. 댓글 삭제 기능 만들기. -> 완, 삭제된것도 카운트하는게 좀 마음에 안 들긴 하지만.
4. 하트나 댓글 달 때 진동오게만들기.-> 완.(안드로이드는 따로 권한설정 해줘야함 근데안함 ㅋ)
5. 유튜브로 연결시키기 -> 완.
6. 한 번에 보이는 comment Text 양 늘리기.(2줄 정도로) -> 완.
6. ver 2 배포하기
*/

/*
계속 검색엔진 성능문제가 있어서 고쳤다.
나머지는 다 했으니 마저 검색엔진 고치면 진짜 끝.
그리고 api키는 내 컴에서 돌릴때는 그냥 지금처럼 env쓰고
빌드할때만 잠깐 env풀고 그냥 문자열로 넣자.
*/

/*
금방 끝날 줄 알았던 검색엔진 성능개선 빡세게 고치고 왔다...
근데 전에 비해서 기하급수적으로 속도가 느려졌으니 이걸 로딩 인디케이터를 넣던 어떤 방법이든
로딩되고있다는걸 보여줘야겠다.

지금은 테스트를 위해 안 고치지만 음악 추가할 때 만약 이미 있으면 module2실행 안되게
*/

/*
이것도 이제 이렇게 끝나네
쓰는 사람들 많았으면 좋겠다 ㅋㅋㅋ
이제부터는 또 전혀 다른 여정이 되겠지
마케팅도 하고 이것저것...
한동안 코드 볼 일은 없었으면 좋겠네~
그때 가서 보면 또 반갑겠지만
그래도 내 사실상 첫 프로젝트고 작품인데
별로 아쉬움 남지는 않는 퀄리티인 것 같아
디테일도 열심히 챙겼고
고생했다 진짜 작년부터 올해까지
많은 일들을 겪으면서도 한 프로젝트를 놓지 않은 보람이 있네 뿌듯하다
정말 이별은 아니지만 완성된 작품을 장식장에 넣는 기분이라고 해야하나 ㅋㅋㅋ
사람들이 써줘서 또 여기 들어왔으면 좋겠네
고생했어 양현아
잘 했다! 많이 성장했고 르브리스라는 이름이 아깝지는 않을 것 같아
조만간 에어리얼로 또 보자
2025.10.06 AM07:32
*/

/*
ㅎㅇ 앱바 색깔이랑 제목 끝까지 보이게 바꾸려고 다시 왔음
2025.10.06 AM07:43
근데 여기저기서 매 번 다 볼 수 있게 하는건 좀 그렇고
그냥 songScreen에서만 하는걸로 하자
나중에는 스크롤로 페이지 넘어다니는것도 만들면 좋겠네.
*/


/*
웹으로 배포하는건 어떨까 싶어서 웹으로 실행해봤는데 우려와 달리 파이어베이스도 잘 동작하네
유일한 문제는 웹에서는 dotenv를 사용할 수 없어서 웹으로 실행하거나 배포할 때는
dotenv를 쓰면 안 된다는 거!
어차피 깃허브에 올릴때 조심하는것 빼고는 별거 없어서 ㄱㅊ하긴 하다.

2025.10.29
*/