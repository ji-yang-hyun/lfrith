/*
근데 아쉬운게... 검색엔진을 아무리 안 바꿀거라고 해도 그래도 일본어 발음정도는 저장하는게 낫지 않을까?

그러면 이렇게 하자.
일본어를 쳐서 검색할 사람은 없으니...
일단 설명란 이제 안받아온다. 채널명과 색인으로만 승부!!
검색어 태그를 설정할 때
제목을 5가지 포멧으로 저장할 것이다.
아냐...
어떻게 하면 좋을까?
내가 원하는 정확한 그게 안 돼...
구글에서는 어떻게 하지?
결국에 단순 인덱싱만으로는 안된다는거야...
구글에서는 인덱싱 후에 랭킹도 한다고 하고 이것저것 하는게 많다고 한다.
예를들어서 요시노를 요시노라고 검색할수는 없어도
yoshino라고 검색했을때는 나와야될거 아냐...

근데 결국에는 이것도 일본어 표기방법을 따를 뿐이잖아...
그러면 그냥 아싸리 일본어로 다 번역하는건 안되나?
아냐...
흠..........
결국에는 일본어로 바꾸는게 맘이 편할 것 같기는 하네
결국엔 다들 일본어를 쓸거 아녀
그러면 검색하는걸 일본어로 바꾸는게 좋을텐데
그러면 병음을 입력했을 때는 완벽히 될거다

-> 그러니까 뭘 하고자 하는거냐면
일단 제목이 들어와, 그걸 다 일본어로 바꿔
그리고 검색어도 일본어로 바꿔
이러면 비슷한 문장에 대한 걱정이 없어지지!!!
왜? 어차피 일본어로는 하나로 돼있을거거든.
근데 그러면 rumor같은건 어떡하지??
rumor은 소문이라는 뜻의 일본어로 바뀌어버릴건데
우리는 그냥 rumor라고 검색하면 그게 또 일본어로 바뀌고 그러면 되는구나 ㅋㅋㅋㅋ
그러면 이렇게 하자.
3가지 채널로 운영하는거야
처음 제목을 입력받으면
1. 전부 일본어
2. 전부 영어
3. 전부 한국어
이렇게 만든다

하나만 걸려라 마인드인데
이건 한국인을 타겟팅한 앱이잖아
그러니까 이제 인덱싱 잘 해서 주요단어만 뽑는건 한국어에만 적용해주고
그건 나중에 따로 설계하자
영어와 일본어의 예시만 한번 보자

kienai를 검색한다고 치면
이게 원어가 일본어잖아?
그러면 일본어에서 걸리겠지

rumor을 검색한다고 치면
이건 또 원어가 영어잖아?
그러면 영어에서 걸리겠지

이렇게 영어랑 일본어는 끝났는데(각자 원어로 가는거니까)
그러면 남은 문제는 한국어잖아
진흙 속에 피다를 누가 일본어 제목을 외워다니겠어 그치?
그러면...
흠.....................
모르겠긔...
아 근데 이거 말고 다른거 만들고싶은데 ㅋㅋㅋㅋㅋㅋㅋㅋㅋ
뭐 만들만한거 없나?
그냥 뭔가... 좀 그래 ㅋㅋㅋ
근데 나는 그 이유를 알 것 같음
그냥 덕질을 너무 안하니까 기부니가 안조은거야
아이디어도 없어지고 ㅇㅇ
그냥 그 뿐임
그게 정설임 미안하지만
쩝....
어쩌지 ㅋㅋㅋㅋㅋ
근데 하는 수 있나, 시작한건 끝내야지
근데 pub.dev찾아보니까 구글에서 플러터 쓰라고 만든 무료 번역 api가 있는 모양
개꿀띠띠가 아닐 수 없긔~~~~

씨발
일본에도 동음이의어가 존나게 많다는걸 망각하고 있었다.
아아아ㅏㅏㅏㅏ 그러면 어떻게 하지????
뜻이 있는건 잘 번역을 한다.
뜻이 없는 것들을 번역 못 하는 것 같다(특히 이름)
그러면 차라리 그냥 뜻이 없는건 알아서 영어로 발음 맞춰서 가겠거니~ 하는게 나으려나?
근데 그러기에는 다즈비의 사례처럼 발음이 줒박았을 수도 있잖아...

그냥 ai를 쓰는게 답일려나

그냥 진짜 임베딩을 쓰는 방법밖에는 없을 것 같네

그러면 사실 이제 언어도 별 상관 없어지니까 몰라레후~ 하고 그냥 구현딸깍 하면 됨.
오픈ai api키를 쓰거나 아니면 저기저기 저 다른 임베딩 계산기 쓰고
유사도 계산하는것만 하면 될 것 같은데?

여기서 더 최적화 하려면 더 자세히 알아야 할 것 같음.
근데 진짜 공부해보고 싶은데????
책이라도 찾아볼까

근데 이거 진짜 재밌겠다...!!!
임베딩 쓰면 여러개의 단어나 문장들을 벡터공간 안에 그냥 표현해버릴 수 있다는거잖아
그 유사도도 만들 수 있고
근데 그걸 보여주고싶은데 그건 안되네... 그 이유는 우리가 이해할 수 있는 최대차원이 3차원이니까...
아쉽구만!

아무튼 임베딩에 대해서 더 공부해보면 해볼만한게 쏟아질 것 같은데????

암튼 일단 지금은 이걸 구현하는데만 신경쓰자.
검색서비스... 어찌해야될지 잘 모르겠네


근데 그니까 일단은 임베딩을 쓸건데, 어떤 임베딩을 쓸거냐???
일단 
1. 나같은 하꼬는 비용걱정 안해도 된다.
2. 일단 그러면 문제는 어떤게 성능이 좋냐인데, 그냥 일단은 쓰기 쉬운거 쓰자.
3. 그러니까 open ai를 쓰자.

근데 생각보다 복잡하긴 하네 그래도 ㅋㅋㅋ...
사람들은 주로 python을 사용하는 듯 하다.
근데 여기서 파이썬을 갑자기 끌어들이면 서버랑 이래저래 복잡해진다.
그러니까 그냥 http api호출로 사용하는 방법을 찾아서 사용하는편이 좋겠다.
자바쪽에서 사용하는걸 찾아보면 좋을 것 같고, 그냥 임베딩 관련된거 해보고싶으면 파이썬 쓰자.

플러터에서 쉽게 사용하는법은 없는 것 같기도...

그러면 파이썬으로 쉽게 가능하다고 하니까
플러터에서 파이썬을 연결할 방법을 찾아보자
지금은 api키 발급까지 했는데 돈이 없어서 실행을 못 하고 있다.
https://seong9566.tistory.com/378
에서 플러터에서 파이썬 코드 실행하는 방법 알려주니 이걸 사용해서 파이썬을 실행하면 될 듯 하다.


결국 현실과 적당히 타협한 선은 이정도다.
1. 원문은 원문으로 검색 가능하다!(아마도 영어겠지)
2. 비슷한 의미의 문장을 적으면 가능하다!
3. 고유명사는 영어로 적어줘요
4. 
*/




/*
여러가지 검색의 경우를
1. 그냥 정직하게 검색(rumor -> rumor, dazbee -> dazbee, 다즈비 -> 다즈비)
2. 일본어로 영어발음을 써놓은 걸 검색(루머 -> ルーマー, rumor -> ルーマー)
3. 한국어로 일본어 발음을 검색(히바나 -> ヒバナ, 요시노 -> 吉乃)
4. 한국어로 영어 발음을 검색(루머 -> rumor, 아도 -> ado)
5. 영어로 일본어 발음을 검색(yoshino -> 吉乃)
6. 같은 의미의 다른언어 검색(내일의 밤하늘 초계반 -> アスノヨゾラ哨戒班)


지금 할 수 있는 것.
- 영어 문장의 유사도 파악
- 챗gpt를 통한 일본어 -> 로마자 변환
- 문장 번역(병음은 완벽하지 않다.)
- 문장을 스플릿하기(일본어는 좀 빡셀수도.)(불러보았습니다, cover 등등 걸러야함)
- 임베딩을 통한 문자의 연관성 파악.
- 문자열 비교
- 사운덱스를 통한 영어 문장의 발음 유사도 파악.


각 케이스를 위한 솔루션.
1. -> 스플릿해서 색인해놓은 단어들에 대조하여 검색한다.
2. -> 일본어 자체를 chatgpt를 통해 로마자로 변환하여놓고, 사운덱스를 통해 유사도 찾자.
3. -> 2번 케이스에서 한국어도 로마자로 변환하여 사운덱스를 통해 유사도 찾자.
4. -> 2번케이스를 한국어로 하자.
5. -> 2번 케이스를 역으로 하자.
6. -> 번역기 돌리고 문장 유사도로 검색하자.


그러기 위해 필요한 것.
1. 영상 제목, 채널명, 검색어 등 인덱싱.(우타이테 전용 색인방법 필요할듯.)
2. 문장 -> 로마자 (chatGPT모델).
3. 문장(단어) -> 사운덱스 코드
4. 번역기
5. 문장 유사도


step. 새로운 영상!
-> 1번 모듈로 색인하여 일단 DB에 저장.
-> 색인한 단어들을 2번 모듈에 넣어서 로마자 저장.
-> 로마자를 3번 모듈에 넣어서 사운덱스 코드 저장.
-> 색인된 것들을 각각 영어로 번역해놓기(완벽하지 않아도 됨.)

step. 검색시!
-> 1번 모듈로 색인하기
-> 색인한 단어들을 2번 모듈에 넣어서 로마자 저장.
-> 3번 모듈로 사운덱스 코드 받기.
-> 영어로 번역하기
-> DB에 있는 사운덱스 코드와 비교 & DB에 있는 영어번역과 유사도 비교하기
-> 내가 설정한 가중치를 통해서 정렬하기
*/